// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `mdsession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Glacier2 = require("ice").Glacier2;
    var Slice = Ice.Slice;

    var MD = __M.module("MD");

    MD.SqlException = Slice.defineUserException(
        function(reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.reason = reason !== undefined ? reason : "";
        },
        Ice.UserException,
        "MD::SqlException",
        function(__os)
        {
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.reason = __is.readString();
        },
        false,
        false);

    MD.TickData = Slice.defineStruct(
        function(InstrumentId, TradingDay, UpdateTime, UpdateMillisec, LastPrice, OpenPrice, HighestPrice, LowestPrice, ClosePrice, SettlementPrice, Volume, Turnover, OpenInterest, UpperLimitPrice, LowerLimitPrice, BidPrice1, BidVolume1, BidPrice2, BidVolume2, BidPrice3, BidVolume3, BidPrice4, BidVolume4, BidPrice5, BidVolume5, AskPrice1, AskVolume1, AskPrice2, AskVolume2, AskPrice3, AskVolume3, AskPrice4, AskVolume4, AskPrice5, AskVolume5)
        {
            this.InstrumentId = InstrumentId !== undefined ? InstrumentId : "";
            this.TradingDay = TradingDay !== undefined ? TradingDay : "";
            this.UpdateTime = UpdateTime !== undefined ? UpdateTime : "";
            this.UpdateMillisec = UpdateMillisec !== undefined ? UpdateMillisec : 0;
            this.LastPrice = LastPrice !== undefined ? LastPrice : 0.0;
            this.OpenPrice = OpenPrice !== undefined ? OpenPrice : 0.0;
            this.HighestPrice = HighestPrice !== undefined ? HighestPrice : 0.0;
            this.LowestPrice = LowestPrice !== undefined ? LowestPrice : 0.0;
            this.ClosePrice = ClosePrice !== undefined ? ClosePrice : 0.0;
            this.SettlementPrice = SettlementPrice !== undefined ? SettlementPrice : 0.0;
            this.Volume = Volume !== undefined ? Volume : 0;
            this.Turnover = Turnover !== undefined ? Turnover : 0.0;
            this.OpenInterest = OpenInterest !== undefined ? OpenInterest : 0.0;
            this.UpperLimitPrice = UpperLimitPrice !== undefined ? UpperLimitPrice : 0.0;
            this.LowerLimitPrice = LowerLimitPrice !== undefined ? LowerLimitPrice : 0.0;
            this.BidPrice1 = BidPrice1 !== undefined ? BidPrice1 : 0.0;
            this.BidVolume1 = BidVolume1 !== undefined ? BidVolume1 : 0;
            this.BidPrice2 = BidPrice2 !== undefined ? BidPrice2 : 0.0;
            this.BidVolume2 = BidVolume2 !== undefined ? BidVolume2 : 0;
            this.BidPrice3 = BidPrice3 !== undefined ? BidPrice3 : 0.0;
            this.BidVolume3 = BidVolume3 !== undefined ? BidVolume3 : 0;
            this.BidPrice4 = BidPrice4 !== undefined ? BidPrice4 : 0.0;
            this.BidVolume4 = BidVolume4 !== undefined ? BidVolume4 : 0;
            this.BidPrice5 = BidPrice5 !== undefined ? BidPrice5 : 0.0;
            this.BidVolume5 = BidVolume5 !== undefined ? BidVolume5 : 0;
            this.AskPrice1 = AskPrice1 !== undefined ? AskPrice1 : 0.0;
            this.AskVolume1 = AskVolume1 !== undefined ? AskVolume1 : 0;
            this.AskPrice2 = AskPrice2 !== undefined ? AskPrice2 : 0.0;
            this.AskVolume2 = AskVolume2 !== undefined ? AskVolume2 : 0;
            this.AskPrice3 = AskPrice3 !== undefined ? AskPrice3 : 0.0;
            this.AskVolume3 = AskVolume3 !== undefined ? AskVolume3 : 0;
            this.AskPrice4 = AskPrice4 !== undefined ? AskPrice4 : 0.0;
            this.AskVolume4 = AskVolume4 !== undefined ? AskVolume4 : 0;
            this.AskPrice5 = AskPrice5 !== undefined ? AskPrice5 : 0.0;
            this.AskVolume5 = AskVolume5 !== undefined ? AskVolume5 : 0;
        },
        false,
        function(__os)
        {
            __os.writeString(this.InstrumentId);
            __os.writeString(this.TradingDay);
            __os.writeString(this.UpdateTime);
            __os.writeInt(this.UpdateMillisec);
            __os.writeDouble(this.LastPrice);
            __os.writeDouble(this.OpenPrice);
            __os.writeDouble(this.HighestPrice);
            __os.writeDouble(this.LowestPrice);
            __os.writeDouble(this.ClosePrice);
            __os.writeDouble(this.SettlementPrice);
            __os.writeInt(this.Volume);
            __os.writeDouble(this.Turnover);
            __os.writeDouble(this.OpenInterest);
            __os.writeDouble(this.UpperLimitPrice);
            __os.writeDouble(this.LowerLimitPrice);
            __os.writeDouble(this.BidPrice1);
            __os.writeInt(this.BidVolume1);
            __os.writeDouble(this.BidPrice2);
            __os.writeInt(this.BidVolume2);
            __os.writeDouble(this.BidPrice3);
            __os.writeInt(this.BidVolume3);
            __os.writeDouble(this.BidPrice4);
            __os.writeInt(this.BidVolume4);
            __os.writeDouble(this.BidPrice5);
            __os.writeInt(this.BidVolume5);
            __os.writeDouble(this.AskPrice1);
            __os.writeInt(this.AskVolume1);
            __os.writeDouble(this.AskPrice2);
            __os.writeInt(this.AskVolume2);
            __os.writeDouble(this.AskPrice3);
            __os.writeInt(this.AskVolume3);
            __os.writeDouble(this.AskPrice4);
            __os.writeInt(this.AskVolume4);
            __os.writeDouble(this.AskPrice5);
            __os.writeInt(this.AskVolume5);
        },
        function(__is)
        {
            this.InstrumentId = __is.readString();
            this.TradingDay = __is.readString();
            this.UpdateTime = __is.readString();
            this.UpdateMillisec = __is.readInt();
            this.LastPrice = __is.readDouble();
            this.OpenPrice = __is.readDouble();
            this.HighestPrice = __is.readDouble();
            this.LowestPrice = __is.readDouble();
            this.ClosePrice = __is.readDouble();
            this.SettlementPrice = __is.readDouble();
            this.Volume = __is.readInt();
            this.Turnover = __is.readDouble();
            this.OpenInterest = __is.readDouble();
            this.UpperLimitPrice = __is.readDouble();
            this.LowerLimitPrice = __is.readDouble();
            this.BidPrice1 = __is.readDouble();
            this.BidVolume1 = __is.readInt();
            this.BidPrice2 = __is.readDouble();
            this.BidVolume2 = __is.readInt();
            this.BidPrice3 = __is.readDouble();
            this.BidVolume3 = __is.readInt();
            this.BidPrice4 = __is.readDouble();
            this.BidVolume4 = __is.readInt();
            this.BidPrice5 = __is.readDouble();
            this.BidVolume5 = __is.readInt();
            this.AskPrice1 = __is.readDouble();
            this.AskVolume1 = __is.readInt();
            this.AskPrice2 = __is.readDouble();
            this.AskVolume2 = __is.readInt();
            this.AskPrice3 = __is.readDouble();
            this.AskVolume3 = __is.readInt();
            this.AskPrice4 = __is.readDouble();
            this.AskVolume4 = __is.readInt();
            this.AskPrice5 = __is.readDouble();
            this.AskVolume5 = __is.readInt();
        },
        211, 
        false);

    MD.MdFactory = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::MD::MdFactory"
        ],
        -1, undefined, undefined, false);

    MD.MdFactoryPrx = Slice.defineProxy(Ice.ObjectPrx, MD.MdFactory.ice_staticId, undefined);

    Slice.defineOperations(MD.MdFactory, MD.MdFactoryPrx,
    {
        "SubscribeMarketData": [, , , , , [3], [[7]], , , , ],
        "UnSubscribeMarketData": [, , , , , [3], [[7]], , , , ]
    });
    Slice.defineSequence(MD, "InstrumentsSeqHelper", "Ice.StringHelper", false);

    MD.MdCallback = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::MD::MdCallback"
        ],
        -1, undefined, undefined, false);

    MD.MdCallbackPrx = Slice.defineProxy(Ice.ObjectPrx, MD.MdCallback.ice_staticId, undefined);

    Slice.defineOperations(MD.MdCallback, MD.MdCallbackPrx,
    {
        "notifyToClient": [, , , , , , [[7]], , , , ],
        "OnTick": [, , , , , , [[MD.TickData]], , , , ],
        "forceLogout": [, , , , , , , , , , ]
    });

    MD.MdSession = Slice.defineObject(
        undefined,
        Ice.Object,
        [
            Glacier2.Session
        ], 2,
        [
            "::Glacier2::Session",
            "::Ice::Object",
            "::MD::MdSession"
        ],
        -1, undefined, undefined, false);

    MD.MdSessionPrx = Slice.defineProxy(Ice.ObjectPrx, MD.MdSession.ice_staticId, [
        Glacier2.SessionPrx]);

    Slice.defineOperations(MD.MdSession, MD.MdSessionPrx,
    {
        "setCallback": [, , , , , , [["MD.MdCallbackPrx"]], , , , ],
        "say": [, , , , , [3], [[7]], , , , ],
        "SubscribeMd": [, , , , , [3], [[7], [7], ["MD.InstrumentsSeqHelper"]], , , , ]
    });
    exports.MD = MD;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : window.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : window));
