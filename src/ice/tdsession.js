// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `tdsession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Glacier2 = require("ice").Glacier2;
    var Slice = Ice.Slice;

    var TD = __M.module("TD");

    TD.SqlException = Slice.defineUserException(
        function(reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.reason = reason !== undefined ? reason : "";
        },
        Ice.UserException,
        "TD::SqlException",
        function(__os)
        {
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.reason = __is.readString();
        },
        false,
        false);

    TD.STDoneInfo = Slice.defineStruct(
        function(doneno, tradeid, sessionid, privateno, cellid, portfolioid, marketcode, seccode, batchno, orderno, doneprice, donevol, doneamount, fundchangeamount, stockvolamount, donetime, donedate, Margin, bs, offsetflag, hedgeflag, tradetype)
        {
            this.doneno = doneno !== undefined ? doneno : 0;
            this.tradeid = tradeid !== undefined ? tradeid : "";
            this.sessionid = sessionid !== undefined ? sessionid : 0;
            this.privateno = privateno !== undefined ? privateno : 0;
            this.cellid = cellid !== undefined ? cellid : 0;
            this.portfolioid = portfolioid !== undefined ? portfolioid : 0;
            this.marketcode = marketcode !== undefined ? marketcode : "";
            this.seccode = seccode !== undefined ? seccode : "";
            this.batchno = batchno !== undefined ? batchno : 0;
            this.orderno = orderno !== undefined ? orderno : 0;
            this.doneprice = doneprice !== undefined ? doneprice : 0.0;
            this.donevol = donevol !== undefined ? donevol : 0.0;
            this.doneamount = doneamount !== undefined ? doneamount : 0.0;
            this.fundchangeamount = fundchangeamount !== undefined ? fundchangeamount : 0.0;
            this.stockvolamount = stockvolamount !== undefined ? stockvolamount : 0.0;
            this.donetime = donetime !== undefined ? donetime : 0;
            this.donedate = donedate !== undefined ? donedate : 0;
            this.Margin = Margin !== undefined ? Margin : 0.0;
            this.bs = bs !== undefined ? bs : "";
            this.offsetflag = offsetflag !== undefined ? offsetflag : "";
            this.hedgeflag = hedgeflag !== undefined ? hedgeflag : "";
            this.tradetype = tradetype !== undefined ? tradetype : "";
        },
        false,
        function(__os)
        {
            __os.writeInt(this.doneno);
            __os.writeString(this.tradeid);
            __os.writeInt(this.sessionid);
            __os.writeInt(this.privateno);
            __os.writeInt(this.cellid);
            __os.writeInt(this.portfolioid);
            __os.writeString(this.marketcode);
            __os.writeString(this.seccode);
            __os.writeInt(this.batchno);
            __os.writeInt(this.orderno);
            __os.writeDouble(this.doneprice);
            __os.writeDouble(this.donevol);
            __os.writeDouble(this.doneamount);
            __os.writeDouble(this.fundchangeamount);
            __os.writeDouble(this.stockvolamount);
            __os.writeInt(this.donetime);
            __os.writeInt(this.donedate);
            __os.writeDouble(this.Margin);
            __os.writeString(this.bs);
            __os.writeString(this.offsetflag);
            __os.writeString(this.hedgeflag);
            __os.writeString(this.tradetype);
        },
        function(__is)
        {
            this.doneno = __is.readInt();
            this.tradeid = __is.readString();
            this.sessionid = __is.readInt();
            this.privateno = __is.readInt();
            this.cellid = __is.readInt();
            this.portfolioid = __is.readInt();
            this.marketcode = __is.readString();
            this.seccode = __is.readString();
            this.batchno = __is.readInt();
            this.orderno = __is.readInt();
            this.doneprice = __is.readDouble();
            this.donevol = __is.readDouble();
            this.doneamount = __is.readDouble();
            this.fundchangeamount = __is.readDouble();
            this.stockvolamount = __is.readDouble();
            this.donetime = __is.readInt();
            this.donedate = __is.readInt();
            this.Margin = __is.readDouble();
            this.bs = __is.readString();
            this.offsetflag = __is.readString();
            this.hedgeflag = __is.readString();
            this.tradetype = __is.readString();
        },
        91, 
        false);

    TD.STAccountInfo = Slice.defineStruct(
        function(cellid, portfolioid, accounttype, currencytype, acctype, deposite, available, buyable, buyfrzamt, buydoneamt, selldoneamt, dealfrozcap, abnormalfrznamt, manualunfrznamt, margin, outcap, incap, realprofit, forbidasset, dthisbal, manualfrznamt, RoyaltyIn, RoyaltyOut, RoyaltyFrozen)
        {
            this.cellid = cellid !== undefined ? cellid : 0;
            this.portfolioid = portfolioid !== undefined ? portfolioid : 0;
            this.accounttype = accounttype !== undefined ? accounttype : 0;
            this.currencytype = currencytype !== undefined ? currencytype : "";
            this.acctype = acctype !== undefined ? acctype : 0;
            this.deposite = deposite !== undefined ? deposite : 0.0;
            this.available = available !== undefined ? available : 0.0;
            this.buyable = buyable !== undefined ? buyable : 0.0;
            this.buyfrzamt = buyfrzamt !== undefined ? buyfrzamt : 0.0;
            this.buydoneamt = buydoneamt !== undefined ? buydoneamt : 0.0;
            this.selldoneamt = selldoneamt !== undefined ? selldoneamt : 0.0;
            this.dealfrozcap = dealfrozcap !== undefined ? dealfrozcap : 0.0;
            this.abnormalfrznamt = abnormalfrznamt !== undefined ? abnormalfrznamt : 0.0;
            this.manualunfrznamt = manualunfrznamt !== undefined ? manualunfrznamt : 0.0;
            this.margin = margin !== undefined ? margin : 0.0;
            this.outcap = outcap !== undefined ? outcap : 0.0;
            this.incap = incap !== undefined ? incap : 0.0;
            this.realprofit = realprofit !== undefined ? realprofit : 0.0;
            this.forbidasset = forbidasset !== undefined ? forbidasset : 0.0;
            this.dthisbal = dthisbal !== undefined ? dthisbal : 0.0;
            this.manualfrznamt = manualfrznamt !== undefined ? manualfrznamt : 0.0;
            this.RoyaltyIn = RoyaltyIn !== undefined ? RoyaltyIn : 0.0;
            this.RoyaltyOut = RoyaltyOut !== undefined ? RoyaltyOut : 0.0;
            this.RoyaltyFrozen = RoyaltyFrozen !== undefined ? RoyaltyFrozen : 0.0;
        },
        false,
        function(__os)
        {
            __os.writeInt(this.cellid);
            __os.writeInt(this.portfolioid);
            __os.writeInt(this.accounttype);
            __os.writeString(this.currencytype);
            __os.writeInt(this.acctype);
            __os.writeDouble(this.deposite);
            __os.writeDouble(this.available);
            __os.writeDouble(this.buyable);
            __os.writeDouble(this.buyfrzamt);
            __os.writeDouble(this.buydoneamt);
            __os.writeDouble(this.selldoneamt);
            __os.writeDouble(this.dealfrozcap);
            __os.writeDouble(this.abnormalfrznamt);
            __os.writeDouble(this.manualunfrznamt);
            __os.writeDouble(this.margin);
            __os.writeDouble(this.outcap);
            __os.writeDouble(this.incap);
            __os.writeDouble(this.realprofit);
            __os.writeDouble(this.forbidasset);
            __os.writeDouble(this.dthisbal);
            __os.writeDouble(this.manualfrznamt);
            __os.writeDouble(this.RoyaltyIn);
            __os.writeDouble(this.RoyaltyOut);
            __os.writeDouble(this.RoyaltyFrozen);
        },
        function(__is)
        {
            this.cellid = __is.readInt();
            this.portfolioid = __is.readInt();
            this.accounttype = __is.readInt();
            this.currencytype = __is.readString();
            this.acctype = __is.readInt();
            this.deposite = __is.readDouble();
            this.available = __is.readDouble();
            this.buyable = __is.readDouble();
            this.buyfrzamt = __is.readDouble();
            this.buydoneamt = __is.readDouble();
            this.selldoneamt = __is.readDouble();
            this.dealfrozcap = __is.readDouble();
            this.abnormalfrznamt = __is.readDouble();
            this.manualunfrznamt = __is.readDouble();
            this.margin = __is.readDouble();
            this.outcap = __is.readDouble();
            this.incap = __is.readDouble();
            this.realprofit = __is.readDouble();
            this.forbidasset = __is.readDouble();
            this.dthisbal = __is.readDouble();
            this.manualfrznamt = __is.readDouble();
            this.RoyaltyIn = __is.readDouble();
            this.RoyaltyOut = __is.readDouble();
            this.RoyaltyFrozen = __is.readDouble();
        },
        169, 
        false);

    TD.STPositionInfo = Slice.defineStruct(
        function(cellid, portfolioid, accounttype, marketcode, seccode, hedgingflag, PosiDirection, pretotalvol, preremainvol, totalvol, availvol, buyvol, sellvol, totalcost, avgprice, commission, OpenCommission, CloseCommission, realizedprofit, sellfrzvol, buydoneamt, selldoneamt, etffrzvol, etfrtnvol, sellfrzundonevol, etffrzundonevol, abnormalfrznvol, manualunfrznvol, mortgagefrozenvol, etfleftvol, curbuyetfleftvol, currfroz, currunfroz, detffrozenvol, usemargin, ydusemargin, totalmargin, discount, totalprofit, TradeType, lockedvol, availlockvol, unlockedvol, availunlockvol, coverdfrozenvol, MarginTradeFrozenVolume)
        {
            this.cellid = cellid !== undefined ? cellid : 0;
            this.portfolioid = portfolioid !== undefined ? portfolioid : 0;
            this.accounttype = accounttype !== undefined ? accounttype : 0;
            this.marketcode = marketcode !== undefined ? marketcode : "";
            this.seccode = seccode !== undefined ? seccode : "";
            this.hedgingflag = hedgingflag !== undefined ? hedgingflag : "";
            this.PosiDirection = PosiDirection !== undefined ? PosiDirection : "";
            this.pretotalvol = pretotalvol !== undefined ? pretotalvol : 0.0;
            this.preremainvol = preremainvol !== undefined ? preremainvol : 0.0;
            this.totalvol = totalvol !== undefined ? totalvol : 0.0;
            this.availvol = availvol !== undefined ? availvol : 0.0;
            this.buyvol = buyvol !== undefined ? buyvol : 0.0;
            this.sellvol = sellvol !== undefined ? sellvol : 0.0;
            this.totalcost = totalcost !== undefined ? totalcost : 0.0;
            this.avgprice = avgprice !== undefined ? avgprice : 0.0;
            this.commission = commission !== undefined ? commission : 0.0;
            this.OpenCommission = OpenCommission !== undefined ? OpenCommission : 0.0;
            this.CloseCommission = CloseCommission !== undefined ? CloseCommission : 0.0;
            this.realizedprofit = realizedprofit !== undefined ? realizedprofit : 0.0;
            this.sellfrzvol = sellfrzvol !== undefined ? sellfrzvol : 0.0;
            this.buydoneamt = buydoneamt !== undefined ? buydoneamt : 0.0;
            this.selldoneamt = selldoneamt !== undefined ? selldoneamt : 0.0;
            this.etffrzvol = etffrzvol !== undefined ? etffrzvol : 0.0;
            this.etfrtnvol = etfrtnvol !== undefined ? etfrtnvol : 0.0;
            this.sellfrzundonevol = sellfrzundonevol !== undefined ? sellfrzundonevol : 0.0;
            this.etffrzundonevol = etffrzundonevol !== undefined ? etffrzundonevol : 0.0;
            this.abnormalfrznvol = abnormalfrznvol !== undefined ? abnormalfrznvol : 0.0;
            this.manualunfrznvol = manualunfrznvol !== undefined ? manualunfrznvol : 0.0;
            this.mortgagefrozenvol = mortgagefrozenvol !== undefined ? mortgagefrozenvol : 0.0;
            this.etfleftvol = etfleftvol !== undefined ? etfleftvol : 0.0;
            this.curbuyetfleftvol = curbuyetfleftvol !== undefined ? curbuyetfleftvol : 0.0;
            this.currfroz = currfroz !== undefined ? currfroz : 0.0;
            this.currunfroz = currunfroz !== undefined ? currunfroz : 0.0;
            this.detffrozenvol = detffrozenvol !== undefined ? detffrozenvol : 0.0;
            this.usemargin = usemargin !== undefined ? usemargin : 0.0;
            this.ydusemargin = ydusemargin !== undefined ? ydusemargin : 0.0;
            this.totalmargin = totalmargin !== undefined ? totalmargin : 0.0;
            this.discount = discount !== undefined ? discount : 0.0;
            this.totalprofit = totalprofit !== undefined ? totalprofit : 0.0;
            this.TradeType = TradeType !== undefined ? TradeType : "";
            this.lockedvol = lockedvol !== undefined ? lockedvol : 0.0;
            this.availlockvol = availlockvol !== undefined ? availlockvol : 0.0;
            this.unlockedvol = unlockedvol !== undefined ? unlockedvol : 0.0;
            this.availunlockvol = availunlockvol !== undefined ? availunlockvol : 0.0;
            this.coverdfrozenvol = coverdfrozenvol !== undefined ? coverdfrozenvol : 0.0;
            this.MarginTradeFrozenVolume = MarginTradeFrozenVolume !== undefined ? MarginTradeFrozenVolume : 0.0;
        },
        false,
        function(__os)
        {
            __os.writeInt(this.cellid);
            __os.writeInt(this.portfolioid);
            __os.writeInt(this.accounttype);
            __os.writeString(this.marketcode);
            __os.writeString(this.seccode);
            __os.writeString(this.hedgingflag);
            __os.writeString(this.PosiDirection);
            __os.writeDouble(this.pretotalvol);
            __os.writeDouble(this.preremainvol);
            __os.writeDouble(this.totalvol);
            __os.writeDouble(this.availvol);
            __os.writeDouble(this.buyvol);
            __os.writeDouble(this.sellvol);
            __os.writeDouble(this.totalcost);
            __os.writeDouble(this.avgprice);
            __os.writeDouble(this.commission);
            __os.writeDouble(this.OpenCommission);
            __os.writeDouble(this.CloseCommission);
            __os.writeDouble(this.realizedprofit);
            __os.writeDouble(this.sellfrzvol);
            __os.writeDouble(this.buydoneamt);
            __os.writeDouble(this.selldoneamt);
            __os.writeDouble(this.etffrzvol);
            __os.writeDouble(this.etfrtnvol);
            __os.writeDouble(this.sellfrzundonevol);
            __os.writeDouble(this.etffrzundonevol);
            __os.writeDouble(this.abnormalfrznvol);
            __os.writeDouble(this.manualunfrznvol);
            __os.writeDouble(this.mortgagefrozenvol);
            __os.writeDouble(this.etfleftvol);
            __os.writeDouble(this.curbuyetfleftvol);
            __os.writeDouble(this.currfroz);
            __os.writeDouble(this.currunfroz);
            __os.writeDouble(this.detffrozenvol);
            __os.writeDouble(this.usemargin);
            __os.writeDouble(this.ydusemargin);
            __os.writeDouble(this.totalmargin);
            __os.writeDouble(this.discount);
            __os.writeDouble(this.totalprofit);
            __os.writeString(this.TradeType);
            __os.writeDouble(this.lockedvol);
            __os.writeDouble(this.availlockvol);
            __os.writeDouble(this.unlockedvol);
            __os.writeDouble(this.availunlockvol);
            __os.writeDouble(this.coverdfrozenvol);
            __os.writeDouble(this.MarginTradeFrozenVolume);
        },
        function(__is)
        {
            this.cellid = __is.readInt();
            this.portfolioid = __is.readInt();
            this.accounttype = __is.readInt();
            this.marketcode = __is.readString();
            this.seccode = __is.readString();
            this.hedgingflag = __is.readString();
            this.PosiDirection = __is.readString();
            this.pretotalvol = __is.readDouble();
            this.preremainvol = __is.readDouble();
            this.totalvol = __is.readDouble();
            this.availvol = __is.readDouble();
            this.buyvol = __is.readDouble();
            this.sellvol = __is.readDouble();
            this.totalcost = __is.readDouble();
            this.avgprice = __is.readDouble();
            this.commission = __is.readDouble();
            this.OpenCommission = __is.readDouble();
            this.CloseCommission = __is.readDouble();
            this.realizedprofit = __is.readDouble();
            this.sellfrzvol = __is.readDouble();
            this.buydoneamt = __is.readDouble();
            this.selldoneamt = __is.readDouble();
            this.etffrzvol = __is.readDouble();
            this.etfrtnvol = __is.readDouble();
            this.sellfrzundonevol = __is.readDouble();
            this.etffrzundonevol = __is.readDouble();
            this.abnormalfrznvol = __is.readDouble();
            this.manualunfrznvol = __is.readDouble();
            this.mortgagefrozenvol = __is.readDouble();
            this.etfleftvol = __is.readDouble();
            this.curbuyetfleftvol = __is.readDouble();
            this.currfroz = __is.readDouble();
            this.currunfroz = __is.readDouble();
            this.detffrozenvol = __is.readDouble();
            this.usemargin = __is.readDouble();
            this.ydusemargin = __is.readDouble();
            this.totalmargin = __is.readDouble();
            this.discount = __is.readDouble();
            this.totalprofit = __is.readDouble();
            this.TradeType = __is.readString();
            this.lockedvol = __is.readDouble();
            this.availlockvol = __is.readDouble();
            this.unlockedvol = __is.readDouble();
            this.availunlockvol = __is.readDouble();
            this.coverdfrozenvol = __is.readDouble();
            this.MarginTradeFrozenVolume = __is.readDouble();
        },
        321, 
        false);

    TD.CThostFtdcTradeField = Slice.defineStruct(
        function(BrokerID, InvestorID, InstrumentID, OrderRef, UserID, ExchangeID, TradeID, Direction, OrderSysID, ParticipantID, ClientID, TradingRole, ExchangeInstID, OffsetFlag, HedgeFlag, Price, Volume, TradeDate, TradeTime, TradeType, PriceSource, TraderID, OrderLocalID, ClearingPartID, BusinessUnit, SequenceNo, TradingDay, SettlementID, BrokerOrderSeq, TradeSource)
        {
            this.BrokerID = BrokerID !== undefined ? BrokerID : "";
            this.InvestorID = InvestorID !== undefined ? InvestorID : "";
            this.InstrumentID = InstrumentID !== undefined ? InstrumentID : "";
            this.OrderRef = OrderRef !== undefined ? OrderRef : "";
            this.UserID = UserID !== undefined ? UserID : "";
            this.ExchangeID = ExchangeID !== undefined ? ExchangeID : "";
            this.TradeID = TradeID !== undefined ? TradeID : "";
            this.Direction = Direction !== undefined ? Direction : "";
            this.OrderSysID = OrderSysID !== undefined ? OrderSysID : "";
            this.ParticipantID = ParticipantID !== undefined ? ParticipantID : "";
            this.ClientID = ClientID !== undefined ? ClientID : "";
            this.TradingRole = TradingRole !== undefined ? TradingRole : "";
            this.ExchangeInstID = ExchangeInstID !== undefined ? ExchangeInstID : "";
            this.OffsetFlag = OffsetFlag !== undefined ? OffsetFlag : "";
            this.HedgeFlag = HedgeFlag !== undefined ? HedgeFlag : "";
            this.Price = Price !== undefined ? Price : 0.0;
            this.Volume = Volume !== undefined ? Volume : 0;
            this.TradeDate = TradeDate !== undefined ? TradeDate : "";
            this.TradeTime = TradeTime !== undefined ? TradeTime : "";
            this.TradeType = TradeType !== undefined ? TradeType : "";
            this.PriceSource = PriceSource !== undefined ? PriceSource : "";
            this.TraderID = TraderID !== undefined ? TraderID : "";
            this.OrderLocalID = OrderLocalID !== undefined ? OrderLocalID : "";
            this.ClearingPartID = ClearingPartID !== undefined ? ClearingPartID : "";
            this.BusinessUnit = BusinessUnit !== undefined ? BusinessUnit : "";
            this.SequenceNo = SequenceNo !== undefined ? SequenceNo : 0;
            this.TradingDay = TradingDay !== undefined ? TradingDay : "";
            this.SettlementID = SettlementID !== undefined ? SettlementID : 0;
            this.BrokerOrderSeq = BrokerOrderSeq !== undefined ? BrokerOrderSeq : 0;
            this.TradeSource = TradeSource !== undefined ? TradeSource : "";
        },
        false,
        function(__os)
        {
            __os.writeString(this.BrokerID);
            __os.writeString(this.InvestorID);
            __os.writeString(this.InstrumentID);
            __os.writeString(this.OrderRef);
            __os.writeString(this.UserID);
            __os.writeString(this.ExchangeID);
            __os.writeString(this.TradeID);
            __os.writeString(this.Direction);
            __os.writeString(this.OrderSysID);
            __os.writeString(this.ParticipantID);
            __os.writeString(this.ClientID);
            __os.writeString(this.TradingRole);
            __os.writeString(this.ExchangeInstID);
            __os.writeString(this.OffsetFlag);
            __os.writeString(this.HedgeFlag);
            __os.writeDouble(this.Price);
            __os.writeInt(this.Volume);
            __os.writeString(this.TradeDate);
            __os.writeString(this.TradeTime);
            __os.writeString(this.TradeType);
            __os.writeString(this.PriceSource);
            __os.writeString(this.TraderID);
            __os.writeString(this.OrderLocalID);
            __os.writeString(this.ClearingPartID);
            __os.writeString(this.BusinessUnit);
            __os.writeInt(this.SequenceNo);
            __os.writeString(this.TradingDay);
            __os.writeInt(this.SettlementID);
            __os.writeInt(this.BrokerOrderSeq);
            __os.writeString(this.TradeSource);
        },
        function(__is)
        {
            this.BrokerID = __is.readString();
            this.InvestorID = __is.readString();
            this.InstrumentID = __is.readString();
            this.OrderRef = __is.readString();
            this.UserID = __is.readString();
            this.ExchangeID = __is.readString();
            this.TradeID = __is.readString();
            this.Direction = __is.readString();
            this.OrderSysID = __is.readString();
            this.ParticipantID = __is.readString();
            this.ClientID = __is.readString();
            this.TradingRole = __is.readString();
            this.ExchangeInstID = __is.readString();
            this.OffsetFlag = __is.readString();
            this.HedgeFlag = __is.readString();
            this.Price = __is.readDouble();
            this.Volume = __is.readInt();
            this.TradeDate = __is.readString();
            this.TradeTime = __is.readString();
            this.TradeType = __is.readString();
            this.PriceSource = __is.readString();
            this.TraderID = __is.readString();
            this.OrderLocalID = __is.readString();
            this.ClearingPartID = __is.readString();
            this.BusinessUnit = __is.readString();
            this.SequenceNo = __is.readInt();
            this.TradingDay = __is.readString();
            this.SettlementID = __is.readInt();
            this.BrokerOrderSeq = __is.readInt();
            this.TradeSource = __is.readString();
        },
        49, 
        false);

    TD.CThostFtdcTradingAccountField = Slice.defineStruct(
        function(BrokerID, AccountID, PreMortgage, PreCredit, PreDeposit, PreBalance, PreMargin, InterestBase, Interest, Deposit, Withdraw, FrozenMargin, FrozenCash, FrozenCommission, CurrMargin, CashIn, Commission, CloseProfit, PositionProfit, Balance, Available, WithdrawQuota, Reserve, TradingDay, SettlementID, Credit, Mortgage, ExchangeMargin, DeliveryMargin, ExchangeDeliveryMargin, ReserveBalance, CurrencyID, PreFundMortgageIn, PreFundMortgageOut, FundMortgageIn, FundMortgageOut, FundMortgageAvailable, MortgageableFund, SpecProductMargin, SpecProductFrozenMargin, SpecProductCommission, SpecProductFrozenCommission, SpecProductPositionProfit, SpecProductCloseProfit, SpecProductPositionProfitByAlg, SpecProductExchangeMargin)
        {
            this.BrokerID = BrokerID !== undefined ? BrokerID : "";
            this.AccountID = AccountID !== undefined ? AccountID : "";
            this.PreMortgage = PreMortgage !== undefined ? PreMortgage : 0.0;
            this.PreCredit = PreCredit !== undefined ? PreCredit : 0.0;
            this.PreDeposit = PreDeposit !== undefined ? PreDeposit : 0.0;
            this.PreBalance = PreBalance !== undefined ? PreBalance : 0.0;
            this.PreMargin = PreMargin !== undefined ? PreMargin : 0.0;
            this.InterestBase = InterestBase !== undefined ? InterestBase : 0.0;
            this.Interest = Interest !== undefined ? Interest : 0.0;
            this.Deposit = Deposit !== undefined ? Deposit : 0.0;
            this.Withdraw = Withdraw !== undefined ? Withdraw : 0.0;
            this.FrozenMargin = FrozenMargin !== undefined ? FrozenMargin : 0.0;
            this.FrozenCash = FrozenCash !== undefined ? FrozenCash : 0.0;
            this.FrozenCommission = FrozenCommission !== undefined ? FrozenCommission : 0.0;
            this.CurrMargin = CurrMargin !== undefined ? CurrMargin : 0.0;
            this.CashIn = CashIn !== undefined ? CashIn : 0.0;
            this.Commission = Commission !== undefined ? Commission : 0.0;
            this.CloseProfit = CloseProfit !== undefined ? CloseProfit : 0.0;
            this.PositionProfit = PositionProfit !== undefined ? PositionProfit : 0.0;
            this.Balance = Balance !== undefined ? Balance : 0.0;
            this.Available = Available !== undefined ? Available : 0.0;
            this.WithdrawQuota = WithdrawQuota !== undefined ? WithdrawQuota : 0.0;
            this.Reserve = Reserve !== undefined ? Reserve : 0.0;
            this.TradingDay = TradingDay !== undefined ? TradingDay : "";
            this.SettlementID = SettlementID !== undefined ? SettlementID : 0;
            this.Credit = Credit !== undefined ? Credit : 0.0;
            this.Mortgage = Mortgage !== undefined ? Mortgage : 0.0;
            this.ExchangeMargin = ExchangeMargin !== undefined ? ExchangeMargin : 0.0;
            this.DeliveryMargin = DeliveryMargin !== undefined ? DeliveryMargin : 0.0;
            this.ExchangeDeliveryMargin = ExchangeDeliveryMargin !== undefined ? ExchangeDeliveryMargin : 0.0;
            this.ReserveBalance = ReserveBalance !== undefined ? ReserveBalance : 0.0;
            this.CurrencyID = CurrencyID !== undefined ? CurrencyID : "";
            this.PreFundMortgageIn = PreFundMortgageIn !== undefined ? PreFundMortgageIn : 0.0;
            this.PreFundMortgageOut = PreFundMortgageOut !== undefined ? PreFundMortgageOut : 0.0;
            this.FundMortgageIn = FundMortgageIn !== undefined ? FundMortgageIn : 0.0;
            this.FundMortgageOut = FundMortgageOut !== undefined ? FundMortgageOut : 0.0;
            this.FundMortgageAvailable = FundMortgageAvailable !== undefined ? FundMortgageAvailable : 0.0;
            this.MortgageableFund = MortgageableFund !== undefined ? MortgageableFund : 0.0;
            this.SpecProductMargin = SpecProductMargin !== undefined ? SpecProductMargin : 0.0;
            this.SpecProductFrozenMargin = SpecProductFrozenMargin !== undefined ? SpecProductFrozenMargin : 0.0;
            this.SpecProductCommission = SpecProductCommission !== undefined ? SpecProductCommission : 0.0;
            this.SpecProductFrozenCommission = SpecProductFrozenCommission !== undefined ? SpecProductFrozenCommission : 0.0;
            this.SpecProductPositionProfit = SpecProductPositionProfit !== undefined ? SpecProductPositionProfit : 0.0;
            this.SpecProductCloseProfit = SpecProductCloseProfit !== undefined ? SpecProductCloseProfit : 0.0;
            this.SpecProductPositionProfitByAlg = SpecProductPositionProfitByAlg !== undefined ? SpecProductPositionProfitByAlg : 0.0;
            this.SpecProductExchangeMargin = SpecProductExchangeMargin !== undefined ? SpecProductExchangeMargin : 0.0;
        },
        false,
        function(__os)
        {
            __os.writeString(this.BrokerID);
            __os.writeString(this.AccountID);
            __os.writeDouble(this.PreMortgage);
            __os.writeDouble(this.PreCredit);
            __os.writeDouble(this.PreDeposit);
            __os.writeDouble(this.PreBalance);
            __os.writeDouble(this.PreMargin);
            __os.writeDouble(this.InterestBase);
            __os.writeDouble(this.Interest);
            __os.writeDouble(this.Deposit);
            __os.writeDouble(this.Withdraw);
            __os.writeDouble(this.FrozenMargin);
            __os.writeDouble(this.FrozenCash);
            __os.writeDouble(this.FrozenCommission);
            __os.writeDouble(this.CurrMargin);
            __os.writeDouble(this.CashIn);
            __os.writeDouble(this.Commission);
            __os.writeDouble(this.CloseProfit);
            __os.writeDouble(this.PositionProfit);
            __os.writeDouble(this.Balance);
            __os.writeDouble(this.Available);
            __os.writeDouble(this.WithdrawQuota);
            __os.writeDouble(this.Reserve);
            __os.writeString(this.TradingDay);
            __os.writeInt(this.SettlementID);
            __os.writeDouble(this.Credit);
            __os.writeDouble(this.Mortgage);
            __os.writeDouble(this.ExchangeMargin);
            __os.writeDouble(this.DeliveryMargin);
            __os.writeDouble(this.ExchangeDeliveryMargin);
            __os.writeDouble(this.ReserveBalance);
            __os.writeString(this.CurrencyID);
            __os.writeDouble(this.PreFundMortgageIn);
            __os.writeDouble(this.PreFundMortgageOut);
            __os.writeDouble(this.FundMortgageIn);
            __os.writeDouble(this.FundMortgageOut);
            __os.writeDouble(this.FundMortgageAvailable);
            __os.writeDouble(this.MortgageableFund);
            __os.writeDouble(this.SpecProductMargin);
            __os.writeDouble(this.SpecProductFrozenMargin);
            __os.writeDouble(this.SpecProductCommission);
            __os.writeDouble(this.SpecProductFrozenCommission);
            __os.writeDouble(this.SpecProductPositionProfit);
            __os.writeDouble(this.SpecProductCloseProfit);
            __os.writeDouble(this.SpecProductPositionProfitByAlg);
            __os.writeDouble(this.SpecProductExchangeMargin);
        },
        function(__is)
        {
            this.BrokerID = __is.readString();
            this.AccountID = __is.readString();
            this.PreMortgage = __is.readDouble();
            this.PreCredit = __is.readDouble();
            this.PreDeposit = __is.readDouble();
            this.PreBalance = __is.readDouble();
            this.PreMargin = __is.readDouble();
            this.InterestBase = __is.readDouble();
            this.Interest = __is.readDouble();
            this.Deposit = __is.readDouble();
            this.Withdraw = __is.readDouble();
            this.FrozenMargin = __is.readDouble();
            this.FrozenCash = __is.readDouble();
            this.FrozenCommission = __is.readDouble();
            this.CurrMargin = __is.readDouble();
            this.CashIn = __is.readDouble();
            this.Commission = __is.readDouble();
            this.CloseProfit = __is.readDouble();
            this.PositionProfit = __is.readDouble();
            this.Balance = __is.readDouble();
            this.Available = __is.readDouble();
            this.WithdrawQuota = __is.readDouble();
            this.Reserve = __is.readDouble();
            this.TradingDay = __is.readString();
            this.SettlementID = __is.readInt();
            this.Credit = __is.readDouble();
            this.Mortgage = __is.readDouble();
            this.ExchangeMargin = __is.readDouble();
            this.DeliveryMargin = __is.readDouble();
            this.ExchangeDeliveryMargin = __is.readDouble();
            this.ReserveBalance = __is.readDouble();
            this.CurrencyID = __is.readString();
            this.PreFundMortgageIn = __is.readDouble();
            this.PreFundMortgageOut = __is.readDouble();
            this.FundMortgageIn = __is.readDouble();
            this.FundMortgageOut = __is.readDouble();
            this.FundMortgageAvailable = __is.readDouble();
            this.MortgageableFund = __is.readDouble();
            this.SpecProductMargin = __is.readDouble();
            this.SpecProductFrozenMargin = __is.readDouble();
            this.SpecProductCommission = __is.readDouble();
            this.SpecProductFrozenCommission = __is.readDouble();
            this.SpecProductPositionProfit = __is.readDouble();
            this.SpecProductCloseProfit = __is.readDouble();
            this.SpecProductPositionProfitByAlg = __is.readDouble();
            this.SpecProductExchangeMargin = __is.readDouble();
        },
        336, 
        false);

    TD.CThostFtdcInvestorPositionField = Slice.defineStruct(
        function(InstrumentID, BrokerID, InvestorID, PosiDirection, HedgeFlag, PositionDate, YdPosition, Position, LongFrozen, ShortFrozen, LongFrozenAmount, ShortFrozenAmount, OpenVolume, CloseVolume, OpenAmount, CloseAmount, PositionCost, PreMargin, UseMargin, FrozenMargin, FrozenCash, FrozenCommission, CashIn, Commission, CloseProfit, PositionProfit, PreSettlementPrice, SettlementPrice, TradingDay, SettlementID, OpenCost, ExchangeMargin, CombPosition, CombLongFrozen, CombShortFrozen, CloseProfitByDate, CloseProfitByTrade, TodayPosition, MarginRateByMoney, MarginRateByVolume, StrikeFrozen, StrikeFrozenAmount, AbandonFrozen)
        {
            this.InstrumentID = InstrumentID !== undefined ? InstrumentID : "";
            this.BrokerID = BrokerID !== undefined ? BrokerID : "";
            this.InvestorID = InvestorID !== undefined ? InvestorID : "";
            this.PosiDirection = PosiDirection !== undefined ? PosiDirection : "";
            this.HedgeFlag = HedgeFlag !== undefined ? HedgeFlag : "";
            this.PositionDate = PositionDate !== undefined ? PositionDate : "";
            this.YdPosition = YdPosition !== undefined ? YdPosition : 0;
            this.Position = Position !== undefined ? Position : 0;
            this.LongFrozen = LongFrozen !== undefined ? LongFrozen : 0;
            this.ShortFrozen = ShortFrozen !== undefined ? ShortFrozen : 0;
            this.LongFrozenAmount = LongFrozenAmount !== undefined ? LongFrozenAmount : 0.0;
            this.ShortFrozenAmount = ShortFrozenAmount !== undefined ? ShortFrozenAmount : 0.0;
            this.OpenVolume = OpenVolume !== undefined ? OpenVolume : 0;
            this.CloseVolume = CloseVolume !== undefined ? CloseVolume : 0;
            this.OpenAmount = OpenAmount !== undefined ? OpenAmount : 0.0;
            this.CloseAmount = CloseAmount !== undefined ? CloseAmount : 0.0;
            this.PositionCost = PositionCost !== undefined ? PositionCost : 0.0;
            this.PreMargin = PreMargin !== undefined ? PreMargin : 0.0;
            this.UseMargin = UseMargin !== undefined ? UseMargin : 0.0;
            this.FrozenMargin = FrozenMargin !== undefined ? FrozenMargin : 0.0;
            this.FrozenCash = FrozenCash !== undefined ? FrozenCash : 0.0;
            this.FrozenCommission = FrozenCommission !== undefined ? FrozenCommission : 0.0;
            this.CashIn = CashIn !== undefined ? CashIn : 0.0;
            this.Commission = Commission !== undefined ? Commission : 0.0;
            this.CloseProfit = CloseProfit !== undefined ? CloseProfit : 0.0;
            this.PositionProfit = PositionProfit !== undefined ? PositionProfit : 0.0;
            this.PreSettlementPrice = PreSettlementPrice !== undefined ? PreSettlementPrice : 0.0;
            this.SettlementPrice = SettlementPrice !== undefined ? SettlementPrice : 0.0;
            this.TradingDay = TradingDay !== undefined ? TradingDay : "";
            this.SettlementID = SettlementID !== undefined ? SettlementID : 0;
            this.OpenCost = OpenCost !== undefined ? OpenCost : 0.0;
            this.ExchangeMargin = ExchangeMargin !== undefined ? ExchangeMargin : 0.0;
            this.CombPosition = CombPosition !== undefined ? CombPosition : 0;
            this.CombLongFrozen = CombLongFrozen !== undefined ? CombLongFrozen : 0;
            this.CombShortFrozen = CombShortFrozen !== undefined ? CombShortFrozen : 0;
            this.CloseProfitByDate = CloseProfitByDate !== undefined ? CloseProfitByDate : 0.0;
            this.CloseProfitByTrade = CloseProfitByTrade !== undefined ? CloseProfitByTrade : 0.0;
            this.TodayPosition = TodayPosition !== undefined ? TodayPosition : 0;
            this.MarginRateByMoney = MarginRateByMoney !== undefined ? MarginRateByMoney : 0.0;
            this.MarginRateByVolume = MarginRateByVolume !== undefined ? MarginRateByVolume : 0.0;
            this.StrikeFrozen = StrikeFrozen !== undefined ? StrikeFrozen : 0;
            this.StrikeFrozenAmount = StrikeFrozenAmount !== undefined ? StrikeFrozenAmount : 0.0;
            this.AbandonFrozen = AbandonFrozen !== undefined ? AbandonFrozen : 0;
        },
        false,
        function(__os)
        {
            __os.writeString(this.InstrumentID);
            __os.writeString(this.BrokerID);
            __os.writeString(this.InvestorID);
            __os.writeString(this.PosiDirection);
            __os.writeString(this.HedgeFlag);
            __os.writeString(this.PositionDate);
            __os.writeInt(this.YdPosition);
            __os.writeInt(this.Position);
            __os.writeInt(this.LongFrozen);
            __os.writeInt(this.ShortFrozen);
            __os.writeDouble(this.LongFrozenAmount);
            __os.writeDouble(this.ShortFrozenAmount);
            __os.writeInt(this.OpenVolume);
            __os.writeInt(this.CloseVolume);
            __os.writeDouble(this.OpenAmount);
            __os.writeDouble(this.CloseAmount);
            __os.writeDouble(this.PositionCost);
            __os.writeDouble(this.PreMargin);
            __os.writeDouble(this.UseMargin);
            __os.writeDouble(this.FrozenMargin);
            __os.writeDouble(this.FrozenCash);
            __os.writeDouble(this.FrozenCommission);
            __os.writeDouble(this.CashIn);
            __os.writeDouble(this.Commission);
            __os.writeDouble(this.CloseProfit);
            __os.writeDouble(this.PositionProfit);
            __os.writeDouble(this.PreSettlementPrice);
            __os.writeDouble(this.SettlementPrice);
            __os.writeString(this.TradingDay);
            __os.writeInt(this.SettlementID);
            __os.writeDouble(this.OpenCost);
            __os.writeDouble(this.ExchangeMargin);
            __os.writeInt(this.CombPosition);
            __os.writeInt(this.CombLongFrozen);
            __os.writeInt(this.CombShortFrozen);
            __os.writeDouble(this.CloseProfitByDate);
            __os.writeDouble(this.CloseProfitByTrade);
            __os.writeInt(this.TodayPosition);
            __os.writeDouble(this.MarginRateByMoney);
            __os.writeDouble(this.MarginRateByVolume);
            __os.writeInt(this.StrikeFrozen);
            __os.writeDouble(this.StrikeFrozenAmount);
            __os.writeInt(this.AbandonFrozen);
        },
        function(__is)
        {
            this.InstrumentID = __is.readString();
            this.BrokerID = __is.readString();
            this.InvestorID = __is.readString();
            this.PosiDirection = __is.readString();
            this.HedgeFlag = __is.readString();
            this.PositionDate = __is.readString();
            this.YdPosition = __is.readInt();
            this.Position = __is.readInt();
            this.LongFrozen = __is.readInt();
            this.ShortFrozen = __is.readInt();
            this.LongFrozenAmount = __is.readDouble();
            this.ShortFrozenAmount = __is.readDouble();
            this.OpenVolume = __is.readInt();
            this.CloseVolume = __is.readInt();
            this.OpenAmount = __is.readDouble();
            this.CloseAmount = __is.readDouble();
            this.PositionCost = __is.readDouble();
            this.PreMargin = __is.readDouble();
            this.UseMargin = __is.readDouble();
            this.FrozenMargin = __is.readDouble();
            this.FrozenCash = __is.readDouble();
            this.FrozenCommission = __is.readDouble();
            this.CashIn = __is.readDouble();
            this.Commission = __is.readDouble();
            this.CloseProfit = __is.readDouble();
            this.PositionProfit = __is.readDouble();
            this.PreSettlementPrice = __is.readDouble();
            this.SettlementPrice = __is.readDouble();
            this.TradingDay = __is.readString();
            this.SettlementID = __is.readInt();
            this.OpenCost = __is.readDouble();
            this.ExchangeMargin = __is.readDouble();
            this.CombPosition = __is.readInt();
            this.CombLongFrozen = __is.readInt();
            this.CombShortFrozen = __is.readInt();
            this.CloseProfitByDate = __is.readDouble();
            this.CloseProfitByTrade = __is.readDouble();
            this.TodayPosition = __is.readInt();
            this.MarginRateByMoney = __is.readDouble();
            this.MarginRateByVolume = __is.readDouble();
            this.StrikeFrozen = __is.readInt();
            this.StrikeFrozenAmount = __is.readDouble();
            this.AbandonFrozen = __is.readInt();
        },
        243, 
        false);
    Slice.defineSequence(TD, "FundSeqHelper", "Ice.StringHelper", false);

    TD.TdFactory = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::TD::TdFactory"
        ],
        -1, undefined, undefined, false);

    TD.TdFactoryPrx = Slice.defineProxy(Ice.ObjectPrx, TD.TdFactory.ice_staticId, undefined);

    Slice.defineOperations(TD.TdFactory, TD.TdFactoryPrx);

    TD.TdCallback = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::TD::TdCallback"
        ],
        -1, undefined, undefined, false);

    TD.TdCallbackPrx = Slice.defineProxy(Ice.ObjectPrx, TD.TdCallback.ice_staticId, undefined);

    Slice.defineOperations(TD.TdCallback, TD.TdCallbackPrx,
    {
        "notifyToClient": [, , , , , , [[7]], , , , ],
        "OnSTDoneRtn": [, , , , , , [[7], [3], [TD.STDoneInfo]], , , , ],
        "OnSTAccountRtn": [, , , , , , [[7], [3], [TD.STAccountInfo]], , , , ],
        "OnSTPositionRtn": [, , , , , , [[7], [3], [TD.STPositionInfo]], , , , ],
        "OnCTPDoneRtn": [, , , , , , [[7], [3], [TD.CThostFtdcTradeField]], , , , ],
        "OnCTPAccountRtn": [, , , , , , [[7], [3], [TD.CThostFtdcTradingAccountField]], , , , ],
        "OnCTPPositionRtn": [, , , , , , [[7], [3], [TD.CThostFtdcInvestorPositionField]], , , , ],
        "forceLogout": [, , , , , , , , , , ]
    });

    TD.TdSession = Slice.defineObject(
        undefined,
        Ice.Object,
        [
            Glacier2.Session
        ], 2,
        [
            "::Glacier2::Session",
            "::Ice::Object",
            "::TD::TdSession"
        ],
        -1, undefined, undefined, false);

    TD.TdSessionPrx = Slice.defineProxy(Ice.ObjectPrx, TD.TdSession.ice_staticId, [
        Glacier2.SessionPrx]);

    Slice.defineOperations(TD.TdSession, TD.TdSessionPrx,
    {
        "setCallback": [, , , , , , [["TD.TdCallbackPrx"]], , , , ],
        "SubscribeTd": [, , , , , [3], [[7], ["TD.FundSeqHelper"]], , , , ],
        "STDoneRtn": [, , , , , , [[7], [3], [TD.STDoneInfo]], , , , ],
        "STAccountRtn": [, , , , , , [[7], [3], [TD.STAccountInfo]], , , , ],
        "STPositionRtn": [, , , , , , [[7], [3], [TD.STPositionInfo]], , , , ],
        "CTPDoneRtn": [, , , , , , [[7], [3], [TD.CThostFtdcTradeField]], , , , ],
        "CTPAccountRtn": [, , , , , , [[7], [3], [TD.CThostFtdcTradingAccountField]], , , , ],
        "CTPPositionRtn": [, , , , , , [[7], [3], [TD.CThostFtdcInvestorPositionField]], , , , ]
    });
    exports.TD = TD;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : window.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : window));
