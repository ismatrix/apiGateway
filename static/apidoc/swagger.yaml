swagger: '2.0'
info:
  title: Smartwin API doc
  description: >-
    Feed your trading app with Smartwin API.
    [Edit](http://editor.swagger.io/#/?import=https://api.invesmart.net/api/public/doc/swagger.yaml)
  version: 1.0.0
host: api.invesmart.net
schemes:
  - https
basePath: /api
produces:
  - application/json
consumes:
  - application/json
security:
  - jsonWebToken: []
paths:
  /public/auth/wechat:
    get:
      tags:
        - Auth
      summary: Get a token by Wechat scan auth
      description: >
        The Wechat auth endpoint is called by qiyehao, following a QRcode scan
        using the user Wechat. The QRcode url contain the client socket.io ID,
        so the server can push the jwt token to the client, and then redirect the user browser
        to https://api.invesmart.net/api/public/wxclose with a 302 redirect status.
      parameters:
        - name: code
          in: query
          description: server use it to query qiyehao user infos
          required: true
          type: string
        - name: state
          in: query
          description: This is the client socket.io ID
          required: true
          type: string
      responses:
        '302':
          description: Success
          headers:
            Location:
              description: https://api.invesmart.net/api/public/wxclose
              type: string
        '401':
          description: Invalid user
      security: []
  /public/auth/password:
    post:
      tags:
        - Auth
      summary: Get a token by password auth
      description: >
        Create a token for the user by userid + password.
      parameters:
        - name: body
          in: body
          description: This is the viewer password update object
          required: true
          schema:
            $ref: '#/definitions/authPassword'
      responses:
        '200':
          description: A token
          schema:
            type: object
            required:
              - ok
              - token
            properties:
              ok:
                type: boolean
                default: true
              token:
                type: string
                example: 'eyJ0eXAiOiJKV1QiCCJhbGciOiJIUzI1NiJ9.eyJfaWQiOiI1NzZhNDNjNjUyNmRjZWRjMDcwMjg4YjMiLCJ1c2VyaWQiOiJ2aWN0b3IiLCJpYXQiOjE0NjY1ODE5NTh9.dwkwBdAb7bdbW8ey4PhZ6Zodhyo_4SMbkoMub1N4eCY'
        '401':
          description: Invalid password
        '404':
          description: User not found
      security: []
  /users:
    get:
      summary: Get all users profiles
      description: >
        Get all users profiles informations.
      tags:
        - Users
      responses:
        '200':
          description: The users profile infos
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
                default: true
              users:
                $ref: '#/definitions/Users'
        '404':
          description: Users not found
  /users/me:
    get:
      summary: Get viewer profile infos
      description: >
        Let the logged in user (the viewer) get his own personal infos (profile).
      tags:
        - Users
      responses:
        '200':
          description: The user profile infos
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
                default: true
              profile:
                $ref: '#/definitions/resProfile'
        '404':
          description: User not found
  /users/me/password:
    put:
      summary: Set or update user password
      description: >
        Let the logged in user set his password. If the user never set his
        password before, he just need to send his newPassword. After that,
        everytime he update his password, he needs to send his current password
        as well.
      parameters:
        - name: body
          in: body
          description: the new password the user wants
          required: true
          schema:
            $ref: '#/definitions/putPassword'
      tags:
        - Users
      responses:
        '200':
          description: Successful operation
          schema:
            type: object
            required:
              - ok
            properties:
              ok:
                type: boolean
                default: true
        '401':
          description: Invalid password
        '404':
          description: User not found
  /funds:
    get:
      summary: Get all funds
      description: >
        Get all funds details.
      tags:
        - Funds
      responses:
        '200':
          description: The funds data
          schema:
            type: object
            required:
              - ok
              - funds
            properties:
              ok:
                type: boolean
                default: true
              funds:
                $ref: '#/definitions/Funds'
        '404':
          description: Funds not found
  /funds/:id:
    get:
      summary: Get a fund by id
      description: >
        Get aa fund details by his id.
      tags:
        - Funds
      responses:
        '200':
          description: The fund data
          schema:
            type: object
            required:
              - ok
              - fund
            properties:
              ok:
                type: boolean
                default: true
              fund:
                $ref: '#/definitions/Fund'
        '404':
          description: Fund not found
  /markets/futures/contracts:
    post:
      tags:
        - Markets
      summary: Get all futures contracts
      parameters:
        - name: body
          in: body
          description: This is the viewer password update object
          required: true
          schema:
            $ref: '#/definitions/reqFuturesContracts'
      responses:
        '200':
          description: The futures contracts data
          schema:
            type: object
            required:
              - ok
              - contracts
            properties:
              ok:
                type: boolean
                default: true
              contracts:
                type: array
                items:
                  $ref: '#/definitions/resFuturesContract'
  /markets/futures/products:
    get:
      tags:
        - Markets
      summary: Get all futures products with main instrumentid and openinterest
      responses:
        '200':
          description: The futures products data
          schema:
            type: object
            required:
              - ok
              - products
            properties:
              ok:
                type: boolean
                default: true
              products:
                type: array
                items:
                  $ref: '#/definitions/resFuturesProduct'
  /markets/futures/products.byExchange:
    get:
      tags:
        - Markets
      summary: Get all futures products organized by exchange
      responses:
        '200':
          description: The futures products data by exchange
          schema:
            type: object
            required:
              - ok
              - productsByExchange
            properties:
              ok:
                type: boolean
                default: true
              productsByExchange:
                type: array
                items:
                  $ref: '#/definitions/resFuturesProduct.ByExchange'
  /markets/futures/lastSnapshot:
    post:
      tags:
        - Markets
      summary: Get last Snapshot for a futures contract
      description: >
        Provide OHLC snapshot datas for futures contracts, and for a given contracts
      parameters:
        - name: body
          in: body
          description: This is the contract options
          required: true
          schema:
            $ref: '#/definitions/reqLastSnapshot'
      responses:
        '200':
          description: Quotes for a contract
          schema:
            type: object
            required:
              - ok
              - lastSnapshot
            properties:
              ok:
                type: boolean
                default: true
              lastSnapshot:
                type: array
                items:
                  $ref: '#/definitions/resSnapshot'
  /markets/futures/quotes:
    post:
      tags:
        - Markets
      summary: Get quotes for a futures contract
      description: >
        Provide OHLC candlestick datas for futures contracts, and for a given period
      parameters:
        - name: body
          in: body
          description: This is the contract quotes options
          required: true
          schema:
            $ref: '#/definitions/reqQuotes'
      responses:
        '200':
          description: Quotes for a contract
          schema:
            type: object
            required:
              - ok
              - quotes
            properties:
              ok:
                type: boolean
                default: true
              quotes:
                type: array
                items:
                  $ref: '#/definitions/bar'
  /markets/futures/indicators/bullBearTrend:
    post:
      tags:
        - Markets
      summary: Get trend indicators for futures indices
      description: >
        Create an indicator per day for bull (+1), bear (-1), and stagnant (0) markets
      parameters:
        - name: body
          in: body
          description: This is the indicator options
          required: true
          schema:
            $ref: '#/definitions/reqIndicator'
      responses:
        '200':
          description: Indicators for each symbol
          schema:
            type: object
            required:
              - ok
              - timeline
              - indicators
            properties:
              ok:
                type: boolean
                default: true
              timeline:
                type: array
                example: ["20160704", "20160630", "20160629", "20160628", "20160627", "20160624"]
                items:
                  type: string
              indicators:
                type: array
                items:
                  $ref: '#/definitions/resIndicator'
      security: []
  /markets/futures/indicators/contractDailyPriceSpeed:
    post:
      tags:
        - Markets
      summary: Get daily price difference for futures contracts
      description: >
        Get the price difference for each future contract (price speed) with uniform timeline
      parameters:
        - name: body
          in: body
          description: This is the indicator options
          required: true
          schema:
            $ref: '#/definitions/reqContractdailypricespeed'
      responses:
        '200':
          description: Indicators for each contract symbol
          schema:
            type: object
            required:
              - ok
              - timeline
              - indicators
            properties:
              ok:
                type: boolean
                default: true
              timeline:
                type: array
                example: ["20160624", "20160627", "20160628", "20160629", "20160630", "20160704"]
                items:
                  type: string
              indicators:
                type: array
                items:
                  $ref: '#/definitions/resContractdailypricespeed'
      security: []
  /authenticate:
    post:
      tags:
        - Markets.IO
      summary: Authenticate websocket connection
      description: >
        provide the token through socket.io, the token will then be saved by the server into the session
      parameters:
        - name: body
          in: body
          description: This is the token
          schema:
            $ref: '#/definitions/Token'
      responses:
        '200':
          description: Quotes for a contract
          schema:
            type: object
            properties:
              ok:
                type: boolean
                default: true
        '400':
          description: Invalid query
          schema:
            $ref: '#/definitions/Error400'
  /unauthorized:
    get:
      tags:
        - Markets.IO
      summary: Receive errors on JWT token auth problem
      responses:
        '200':
          description: The futures contracts data
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'UnauthorizedError'
  /authenticated:
    get:
      tags:
        - Markets.IO
      summary: Receive authenticated event if JWT token auth succeeded
      responses:
        '200':
          description: JWT token auth succeeded
  /tick:
    get:
      tags:
        - Markets.IO
      summary: Receive ticker object
      responses:
        '200':
          description: The ticker
          schema:
            $ref: '#/definitions/tick'
  /subscribe:
    post:
      tags:
        - Markets.IO
      summary: Subscribe live ticker
      parameters:
        - name: body
          in: body
          description: This is the ticker subscribe request
          required: true
          schema:
            $ref: '#/definitions/reqLiveTick'
      responses:
        '200':
          description: Response sent through callback function
          schema:
            type: object
            properties:
              ok:
                type: boolean
                default: true
        '400':
          description: Invalid query
          schema:
            $ref: '#/definitions/Error400'
  /unsubscribe:
    post:
      tags:
        - Markets.IO
      summary: Unsubscribe live ticker
      parameters:
        - name: body
          in: body
          description: This is the ticker unsubscribe request
          required: true
          schema:
            $ref: '#/definitions/reqLiveTick'
      responses:
        '200':
          description: Response sent through callback function
          schema:
            type: object
            properties:
              ok:
                type: boolean
                default: true
        '400':
          description: Invalid query
          schema:
            $ref: '#/definitions/Error400'
  /errors:
    get:
      summary: Error examples
      description: >
        Example of all the errors the API can produce.
      tags:
        - Errors
      responses:
        '400':
          description: Invalid query
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid password
          schema:
            $ref: '#/definitions/Error401'
        '403':
          description: Access forbidden
          schema:
            $ref: '#/definitions/Error403'
        '404':
          description: Missing something
          schema:
            $ref: '#/definitions/Error404'
        '405':
          description: The method is not allowed
          schema:
            $ref: '#/definitions/Error405'
        '500':
          description: Internal error occured
          schema:
            $ref: '#/definitions/Error500'
        '501':
          description: Method not implemented"
          schema:
            $ref: '#/definitions/Error501'
securityDefinitions:
  jsonWebToken:
    type: apiKey
    name: Authorization
    in: header
definitions:
  Users:
    type: array
    items:
      $ref: '#/definitions/resProfile'
  resProfile:
    type: object
    required:
      - userid
      - name
      - department
      - email
      - avatar
      - hasPassword
    properties:
      userid:
        type: string
        description: User userid from qiyehao
        example: victor
      name:
        type: string
        description: Name from qiyehao
        example: 鹏威
      department:
        type: array
        items:
          $ref: '#/definitions/Department'
      email:
        type: string
        description: Email from qiyehao
        example: victor.bonhomme@invesmart.cn
      avatar:
        type: string
        description: Avatar url from qiyehao
        example: http://shp.qpic.cn/bizmp/FUia0rytBsibJzaO5yxCyicbYWD2LvlGibDnH9o8UEXpQsqMaKUPmtNGtw
      hasPassword:
        type: boolean
        description: 'If user has a password, value is true, otherwise false'
        example: true
  Department:
    type: object
    properties:
      id:
        type: number
        example: 2
      name:
        type: string
        example: 系统部
      parentid:
        type: number
        example: 1
      order:
        type: number
        example: 200
  Funds:
    type: array
    items:
      $ref: '#/definitions/Fund'
  Fund:
    type: object
    properties:
      fundid:
        type: string
        example: "3000380"
      fundname:
        type: string
        example: "慧网进取G号"
      investmentadviser:
        type: string
        example: "慧网基金"
      funddate:
        type: string
        format: date-time
      equityinitial:
        type: number
        example: 2000000
  putPassword:
    type: object
    required:
      - newPassword
    properties:
      newPassword:
        type: string
      password:
        type: string
        format: password
  authPassword:
    type: object
    required:
      - userid
      - password
    properties:
      userid:
        type: string
      password:
        type: string
        format: password
  resFuturesProduct:
    type: object
    required:
      - exchangeid
      - productname
      - productid
      - mainins
      - maininsopeninterest
    properties:
      exchangeid:
        type: string
        example: "SHFE"
      productname:
        type: string
        example: "热轧卷板"
      productid:
        type: string
        example: "hc"
      mainins:
        type: string
        example: "hc1610"
      maininsopeninterest:
        type: number
        example: 2172398
  resFuturesProduct.ByExchange:
    type: object
    required:
      - exchangeid
      - products
    properties:
      exchangeid:
        type: string
        example: "SHFE"
      products:
        type: array
        items:
          $ref: '#/definitions/resFuturesProduct'
  reqLastSnapshot:
    type: object
    required:
      - symbols
    properties:
      symbols:
        type: array
        example: ["IC1608","a1701"]
        items:
          type: string
  resSnapshot:
    type: object
    required:
      - maxtradingday
      - instrument
      - tradingday
      - average
      - close
      - high
      - low
      - open
      - openinterest
      - preclose
      - preoopeninterest
      - presettlement
      - settlement
      - turnover
      - volume
    properties:
      maxtradingday:
        type: string
        example: "20160704"
      instrument:
        type: string
        example: "IF1608"
      tradingday:
        type: string
        example: "20160704"
      average:
        type: number
        example: 936367.191283293
      close:
        type: number
        example: 3136
      high:
        type: number
        example: 3200
      low:
        type: number
        example: 3058.4
      open:
        type: number
        example: 3058.4
      openinterest:
        type: number
        example: 2217
      preclose:
        type: number
        example: 3062.4
      preoopeninterest:
        type: number
        example: 1880
      presettlement:
        type: number
        example: 3074.2
      settlement:
        type: number
        example: 0
      turnover:
        type: number
        example: 773439300
      volume:
        type: number
        example: 826
  reqFuturesContracts:
    type: object
    required:
      - symbols
      - exchanges
      - ranks
      - productClasses
      - isTrading
    properties:
      symbols:
        type: array
        example: ["all"]
        items:
          type: string
      exchanges:
        type: array
        example: ["all"]
        items:
          type: string
      ranks:
        type: array
        example: [1, 2]
        items:
          type: number
      productClasses:
        type: array
        example: ["1", "8", "9"]
        items:
          type: string
      isTrading:
        type: array
        example: [1, 0]
        items:
          type: number
  resFuturesContract:
    type: object
    required:
      - instrumentid
      - exchangeid
      - istrading
      - productid
      - productclass
    properties:
      instrumentid:
        type: string
        example: "fu1604"
      exchangeid:
        type: string
        example: "SHFE"
      instrumentname:
        type: string
        example: "燃料油1604"
      istrading:
        type: number
        example: 1
      productid:
        type: string
        example: "fu"
      productclass:
        type: string
        example: "1"
      rank:
        type: number
        example: 1
        enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
  reqQuotes:
    type: object
    required:
      - symbol
      - resolution
      - startDate
      - endDate
    properties:
      symbol:
        type: string
        example: "IF1606"
      resolution:
        type: string
        example: "minute"
        enum: ["minute", "day"]
      startDate:
        type: string
        example: "20150401"
      endDate:
        type: string
        example: "20160401"
  Token:
    type: object
    properties:
      token:
        type: string
        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOiI1NzZhNDNjjNjUyNmRjZWRjMDcwMjg4YjMiLCJ1c2VyaWQiOiJ2aWN0b3IiLCJkcHQiOlsi57O757uf6YOoIl0sImlhdCI6MTQ2NzE2NDg5Mn0.-ousXclNcnTbIDTJPJWnAkVVPErPw418TMKDqpWlZO0"
  reqLiveTick:
    type: object
    required:
      - type
      - symbol
      - resolution
    properties:
      type:
        type: string
        example: "futures"
      symbol:
        type: string
        example: "IF1606"
      resolution:
        type: string
        example: "tick"
  bar:
    type: object
    required:
      - timestamp
      - open
      - high
      - low
      - close
      - volume
      - tradingDay
    properties:
      timestamp:
        type: number
        example: 1464182400000
      open:
        type: number
        example: 1560
      high:
        type: number
        example: 1575
      low:
        type: number
        example: 1554
      close:
        type: number
        example: 1556
      volume:
        type: number
        example: 234
      tradingDay:
        type: string
        example: "IF1606"
  tick:
    type: object
    properties:
      askPrice1:
        type: number
        example: 3172
      askVolume1:
        type: number
        example: 3
      bidPrice1:
        type: number
        example: 3171.2
      bidVolume1:
        type: number
        example: 2
      openInterest:
        type: number
        example: 1556
      price:
        type: number
        example: 1560
      resolution:
        type: string
        example: 'tick'
      symbol:
        type: string
        example: 'IF1607'
      timestamp:
        type: number
        example: 1464182400000
      totalTurnover:
        type: number
        example: 11005455780
      totalVolume:
        type: number
        example: 11557
      tradingDay:
        type: string
        example: "20160708"
      turnover:
        type: number
        example: 951600
      volume:
        type: number
        example: 1
  reqIndicator:
    type: object
    properties:
      startDate:
        type: string
        example: "20150401"
      endDate:
        type: string
        example: "20160401"
      symbols:
        type: array
        example: ["all"]
        items:
          type: string
  resIndicator:
    type: object
    properties:
      symbol:
        type: string
        example: "agIDX"
      name:
        type: string
        example: "白银指数"
      values:
        type: array
        example: [1, 1, 0, 0,-1, -1]
        items:
          type: number
  reqContractdailypricespeed:
    type: object
    properties:
      symbols:
        type: array
        example: ["ni", "IF", "T"]
        items:
          type: string
  resContractdailypricespeed:
    type: object
    properties:
      symbol:
        type: string
        example: "ni1609"
      productSymbol:
        type: string
        example: "ni"
      values:
        type: array
        example: [0, 240, 560, -130, -70, -30]
        items:
          type: number
  Error400:
    type: object
    properties:
      ok:
        type: boolean
        default: false
      error:
        type: string
        example: Invalid query
  Error401:
    type: object
    properties:
      ok:
        type: boolean
        default: false
      error:
        type: string
        example: Invalid password
  Error403:
    type: object
    properties:
      ok:
        type: boolean
        default: false
      error:
        type: string
        example: Access forbidden
  Error404:
    type: object
    properties:
      ok:
        type: boolean
        default: false
      error:
        type: string
        example: Missing something
  Error405:
    type: object
    properties:
      ok:
        type: boolean
        default: false
      error:
        type: string
        example: Method not allowed
  Error500:
    type: object
    properties:
      ok:
        type: boolean
        default: false
      error:
        type: string
        example: Internal Server Error
  Error501:
    type: object
    properties:
      ok:
        type: boolean
        default: false
      error:
        type: string
        example: Method not implemented
