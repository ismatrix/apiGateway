swagger: '2.0'
info:
  title: Smartwin API doc
  description: >-
    Feed your trading app with Smartwin API.
    [Edit](http://editor.swagger.io/#/?import=https://api.invesmart.net/api/public/doc/swagger.yaml)
  version: 1.0.0
host: api.invesmart.net
schemes:
  - https
basePath: /api
produces:
  - application/json
consumes:
  - application/json
paths:
  /public/auth/wechat:
    get:
      summary: Get a token by Wechat scan auth
      description: >
        The Wechat auth endpoint is called by qiyehao, following a QRcode scan
        using the user Wechat. The QRcode url contain the client socket.io ID,
        so the server can push the jwt token to the client, and then redirect the user browser
        to https://api.invesmart.net/api/public/wxclose with a 302 redirect status.
      parameters:
        - name: code
          in: query
          description: server use it to query qiyehao user infos
          required: true
          type: string
        - name: state
          in: query
          description: This is the client socket.io ID
          required: true
          type: string
      tags:
        - Auth
      responses:
        '302':
          description: Success
          headers:
            Location:
              description: https://api.invesmart.net/api/public/wxclose
              type: string
        '401':
          description: Invalid user
  /public/auth/password:
    post:
      summary: Get a token by password auth
      description: >
        Create a token for the user by userid + password.
      parameters:
        - name: body
          in: body
          description: This is the viewer password update object
          required: true
          schema:
            $ref: '#/definitions/authPassword'
      tags:
        - Auth
      responses:
        '200':
          description: A token
          schema:
            type: object
            properties:
              ok:
                type: boolean
                default: true
              token:
                type: string
                example: 'eyJ0eXAiOiJKV1QiCCJhbGciOiJIUzI1NiJ9.eyJfaWQiOiI1NzZhNDNjNjUyNmRjZWRjMDcwMjg4YjMiLCJ1c2VyaWQiOiJ2aWN0b3IiLCJpYXQiOjE0NjY1ODE5NTh9.dwkwBdAb7bdbW8ey4PhZ6Zodhyo_4SMbkoMub1N4eCY'
        '401':
          description: Invalid password
        '404':
          description: User not found
  /users/me:
    get:
      summary: Get viewer profile infos
      description: >
        Let the logged in user (the viewer) get his own personal infos (profile).
      tags:
        - Users
      responses:
        '200':
          description: The user profile infos
          schema:
            type: object
            properties:
              ok:
                type: boolean
                default: true
              profile:
                $ref: '#/definitions/Profile'
        '404':
          description: User not found
      security:
        - jsonWebToken: []
  /users/me/password:
    put:
      summary: Set or update user password
      description: >
        Let the logged in user set his password. If the user never set his
        password before, he just need to send his newPassword. After that,
        everytime he update his password, he needs to send his current password
        as well.
      parameters:
        - name: body
          in: body
          description: the new password the user wants
          required: true
          schema:
            $ref: '#/definitions/putPassword'
      tags:
        - Users
      responses:
        '200':
          description: Successful operation
          schema:
            type: object
            properties:
              ok:
                type: boolean
                default: true
        '401':
          description: Invalid password
        '404':
          description: User not found
      security:
        - jsonWebToken: []
  /funds:
    get:
      summary: Get all funds
      description: >
        Get all funds details.
      tags:
        - Funds
      responses:
        '200':
          description: The funds data
          schema:
            type: object
            properties:
              ok:
                type: boolean
                default: true
              funds:
                $ref: '#/definitions/Funds'
        '404':
          description: Funds not found
  /funds/:id:
    get:
      summary: Get a fund by id
      description: >
        Get aa fund details by his id.
      tags:
        - Funds
      responses:
        '200':
          description: The fund data
          schema:
            type: object
            properties:
              ok:
                type: boolean
                default: true
              fund:
                $ref: '#/definitions/Fund'
        '404':
          description: Fund not found
  /errors:
    get:
      summary: Error examples
      description: >
        Example of all the errors the API can produce.
      tags:
        - Errors
      responses:
        '400':
          description: Invalid query
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid password
          schema:
            $ref: '#/definitions/Error401'
        '403':
          description: Access forbidden
          schema:
            $ref: '#/definitions/Error403'
        '404':
          description: Missing something
          schema:
            $ref: '#/definitions/Error404'
        '405':
          description: The method is not allowed
          schema:
            $ref: '#/definitions/Error405'
        '500':
          description: Internal error occured
          schema:
            $ref: '#/definitions/Error500'
        '501':
          description: Method not implemented"
          schema:
            $ref: '#/definitions/Error501'
securityDefinitions:
  jsonWebToken:
    type: apiKey
    name: Authorization
    in: header
definitions:
  Profile:
    type: object
    properties:
      userid:
        type: string
        description: User userid from qiyehao
      name:
        type: string
        description: Name from qiyehao
      department:
        type: array
        items:
          $ref: '#/definitions/Department'
      email:
        type: string
        description: Email from qiyehao
      avatar:
        type: string
        description: Avatar url from qiyehao
      hasPassword:
        type: boolean
        description: 'If user has a password, value is true, otherwise false'
  Department:
    type: object
    properties:
      id:
        type: number
      name:
        type: string
      parentid:
        type: number
      order:
        type: number
  Funds:
    type: array
    items:
      $ref: '#/definitions/Fund'
  Fund:
    type: object
    properties:
      fundid:
        type: string
        example: "3000380"
      fundname:
        type: string
        example: "慧网进取G号"
      investmentadviser:
        type: string
        example: "慧网基金"
      funddate:
        type: string
        format: date-time
      equityinitial:
        type: number
        example: 2000000
  putPassword:
    type: object
    required:
      - newPassword
    properties:
      newPassword:
        type: string
      password:
        type: string
        format: password
  authPassword:
    type: object
    required:
      - userid
      - password
    properties:
      userid:
        type: string
      password:
        type: string
        format: password
  Error400:
    type: object
    properties:
      ok:
        type: boolean
        default: false
      error:
        type: string
        example: Invalid query
  Error401:
    type: object
    properties:
      ok:
        type: boolean
        default: false
      error:
        type: string
        example: Invalid password
  Error403:
    type: object
    properties:
      ok:
        type: boolean
        default: false
      error:
        type: string
        example: Access forbidden
  Error404:
    type: object
    properties:
      ok:
        type: boolean
        default: false
      error:
        type: string
        example: Missing something
  Error405:
    type: object
    properties:
      ok:
        type: boolean
        default: false
      error:
        type: string
        example: Method not allowed
  Error500:
    type: object
    properties:
      ok:
        type: boolean
        default: false
      error:
        type: string
        example: Internal Server Error
  Error501:
    type: object
    properties:
      ok:
        type: boolean
        default: false
      error:
        type: string
        example: Method not implemented
